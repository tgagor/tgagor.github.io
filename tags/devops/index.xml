<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevOps on timor's site</title><link>https://timor.site/tags/devops/</link><description>Recent content in DevOps on timor's site</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 04 Mar 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://timor.site/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Ansible - ssh pipelining</title><link>https://timor.site/2014/03/ansible-ssh-pipelining/</link><pubDate>Tue, 04 Mar 2014 00:00:00 +0000</pubDate><guid>https://timor.site/2014/03/ansible-ssh-pipelining/</guid><description>In recent Ansible update to 1.5 version there is really nice feature ssh pipelining. This option is serious alternative to accelerated mode.
Just add to you config file (ex. ~/.ansible.cfg):
[ssh_connection] pipelining=True Now run any playbook - you will see the difference ðŸ˜„
Source (and extended info about):
http://blog.ansibleworks.com/2014/01/15/ssh-connection-upgrades-coming-in-ansible-1-5/</description></item><item><title>Ansible - Dynamicaly update /etc/hosts files on target servers</title><link>https://timor.site/2013/12/ansible-dynamicaly-update-etc-hosts-files-on-target-servers/</link><pubDate>Wed, 11 Dec 2013 00:00:00 +0000</pubDate><guid>https://timor.site/2013/12/ansible-dynamicaly-update-etc-hosts-files-on-target-servers/</guid><description>I was configuring GlusterFS on few servers using Ansible and have a need to update /etc/hosts with hostnames for easier configuration. I found this one working:
- name: Update /etc/hosts lineinfile: dest=/etc/hosts regexp=&amp;#39;.*{{item}}$&amp;#39; line=&amp;#39;{{hostvars.{{item}}.ansible_default_ipv4.address}} {{item}}&amp;#39; state=present with_items: &amp;#39;{{groups.somegroup}}&amp;#39; Source: http://xmeblog.blogspot.com/2013/06/ansible-dynamicaly-update-etchosts.html</description></item></channel></rss>