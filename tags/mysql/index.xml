<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MySQL on timor's site</title><link>https://timor.site/tags/mysql/</link><description>Recent content in MySQL on timor's site</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 23 Apr 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://timor.site/tags/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>Daily MySQL backups with xtrabackup</title><link>https://timor.site/2016/04/daily-mysql-backups-with-xtrabackup/</link><pubDate>Sat, 23 Apr 2016 00:00:00 +0000</pubDate><guid>https://timor.site/2016/04/daily-mysql-backups-with-xtrabackup/</guid><description>I&amp;rsquo;ve been using standard MySQL dumps as backup technique on my VPS for few years. It works fine and backups were usable few times when I needed them. But in other places I&amp;rsquo;m using xtrabackup. It&amp;rsquo;s faster when crating backups and a lot faster when restoring them - they&amp;rsquo;re binary so there is no need to reevaluate all SQL create tables/inserts/etc. Backups also include my.cnf config file so restoring on other machine should be easy.</description></item><item><title>Mass replace in WordPress posts via MySQL query</title><link>https://timor.site/2016/02/mass-replace-in-wordpress-posts-via-mysql-query/</link><pubDate>Tue, 09 Feb 2016 00:00:00 +0000</pubDate><guid>https://timor.site/2016/02/mass-replace-in-wordpress-posts-via-mysql-query/</guid><description>&lt;p>I was doing a lot of changes to my old posts, switched to HTTPS, etc. Sometimes it was useful to change some particular text in all my old posts at a time, but there is no such feature in WordPress. But WordPress runs on MySQL and I could use SQL query to update such posts.&lt;/p>
&lt;p>Make backup - it&amp;rsquo;s not required but strongly advised 😃&lt;/p>
&lt;p>Now use this query as template to replace in place whatever you need:&lt;/p>
&lt;div class="highlight"></description></item><item><title>MySQL - reset root password</title><link>https://timor.site/2015/12/mysql-reset-root-password/</link><pubDate>Mon, 28 Dec 2015 00:00:00 +0000</pubDate><guid>https://timor.site/2015/12/mysql-reset-root-password/</guid><description>It will happen from time to time, that you&amp;rsquo;re on alien machine and have to brutally update things in db without knowing credentials. Example is for root (quite secure candidate to change because it shouldn&amp;rsquo;t be used in app 😃 ) but will work for any user.
shutdown db service mysql stop create text file with command like this (update user accordingly) ex. in /tmp/pwchange.txt SET PASSWORD FOR &amp;#34;root&amp;#34;@&amp;#34;localhost&amp;#34; = PASSWORD(&amp;#34;HereYourNewPassword&amp;#34;); start mysqld with --init-file param mysqld_safe --init-file=/tmp/pwchange.</description></item><item><title>Debian - Upgrade MySQL to MariaDB</title><link>https://timor.site/2014/01/debian-upgrade-mysql-to-mariadb/</link><pubDate>Fri, 24 Jan 2014 00:00:00 +0000</pubDate><guid>https://timor.site/2014/01/debian-upgrade-mysql-to-mariadb/</guid><description>After reading some good opinions about MariaDB I wanted to give it a try. Upgrade looks quite straight forward but I found some issues a little tricky.
Installation Add repo and key:
cat &amp;gt; /etc/apt/sources.list &amp;lt;&amp;lt;SRC deb http://mirrors.supportex.net/mariadb/repo/5.5/debian wheezy main deb-src http://mirrors.supportex.net/mariadb/repo/5.5/debian wheezy main SRC (find more repositories here)
Now install MariaDB:
sudo apt-get update sudo apt-get install mariadb-server It could be better to install mariadb-server-5.5 and mariadb-client-5.5 package instead, because of this error.</description></item><item><title>MySQL - Proste metody optymalizacji</title><link>https://timor.site/2011/12/mysql-proste-metody-optymalizacji/</link><pubDate>Thu, 29 Dec 2011 00:00:00 +0000</pubDate><guid>https://timor.site/2011/12/mysql-proste-metody-optymalizacji/</guid><description>Wcześniej czy później zawsze pojawia się potrzeba zoptymalizowania naszej bazy MySQL. Przedstawię kilka zmian w konfiguracji, które powinny zwiększyć wydajność w większości przypadków.
MyISAM - key_buffer_size Najprostszą optymalizacją baz/tabel z mechanizmem MyISAM jest odpowiednie dobranie bufora na cache dla kluczy i indeksów (dane nigdy nie są cachowane). Poniższe zapytanie pozwala oszacować zalecany rozmiar cache&amp;rsquo;u:
SELECT CONCAT(ROUND(KBS/POWER(1024, IF(PowerOf1024&amp;lt;0,0,IF(PowerOf1024&amp;gt;3,0,PowerOf1024)))+0.4999), SUBSTR(&amp;#39; KMG&amp;#39;,IF(PowerOf1024&amp;lt;0,0, IF(PowerOf1024&amp;gt;3,0,PowerOf1024))+1,1)) recommended_key_buffer_size FROM (SELECT LEAST(POWER(2,32),KBS1) KBS FROM (SELECT SUM(index_length) KBS1 FROM information_schema.</description></item><item><title>MySQL - dostęp zdalny na szybko</title><link>https://timor.site/2011/08/mysql-na-szybko/</link><pubDate>Sat, 27 Aug 2011 00:00:00 +0000</pubDate><guid>https://timor.site/2011/08/mysql-na-szybko/</guid><description>Instalacja serwera MySQL na Debianie jest niezwykle prosta i sprowadza się do jednego polecenia:
sudo apt-get install mysql-server Polecenie to zainstaluje i uruchomi usługę serwerową MySQL. W czasie instalacji będziemy proszeni o podanie hasła dla root&amp;rsquo;a (które oczywiście dobrze jest zapamiętać bądź zapisać).
Tak zainstalowana baza nasłuchuje na lokalnym porcie (localhost:3306) umożliwiająć dostęp wyłącznie root&amp;rsquo;owi. Jest to bardzo bezpieczna konfiguracja&amp;hellip; Ale jeśli nie mamy zamiaru na tej samej maszynie instalować oprogramowania zarządzającego to nie zawsze jest to wygodne, tym bardziej gdy przykładowo mamy działającego phpmyadmin&amp;rsquo;a na jakimś serwerze www.</description></item></channel></rss>