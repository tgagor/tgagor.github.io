<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>reverse proxy on timor&#39;s site</title>
    <link>https://timor.site/tags/reverse-proxy/</link>
    <description>Recent content in reverse proxy on timor&#39;s site</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;span&gt;&amp;copy; 2011 &lt;a href=&#34;https://timor.site&#34;&gt;timor&#39;s site&lt;/a&gt;&lt;/span&gt; &lt;span&gt;Licensed under &lt;a rel=&#34;license&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34; href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;(CC BY-SA 4.0)&lt;/a&gt;&lt;/span&gt;
</copyright>
    <lastBuildDate>Fri, 29 Jun 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://timor.site/tags/reverse-proxy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nginx - konfiguracja pod WordPress’a</title>
      <link>https://timor.site/2012/06/nginx-konfiguracja-pod-wordpressa/</link>
      <pubDate>Fri, 29 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://timor.site/2012/06/nginx-konfiguracja-pod-wordpressa/</guid>
      <description>To raczej nie jest podstawowy konfig i próżno szukać go na stronie WordPress&amp;rsquo;a, więc odradzam tę zabawę jeśli nie zna się zbyt dobrze nginx&amp;rsquo;a.
Ponieważ serwerek, na którym działa stronka to sprzęcik z Atomem 330 i mocy na CPU zbyt wiele nie ma to popularne pluginy (np. W3 Total Cache) potencjalnie zwiększające wydajność tak na prawdę zmulały stronkę jeszcze bardziej. Pluginów sprawdziłem kilka i każdorazowo efekt był podobny - stronka działała wolniej niż bez ich pomocy.</description>
    </item>
    
    <item>
      <title>Apache - reverse proxy z cache’owaniem</title>
      <link>https://timor.site/2012/06/apache-reverse-proxy-z-cacheowaniem/</link>
      <pubDate>Sun, 17 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://timor.site/2012/06/apache-reverse-proxy-z-cacheowaniem/</guid>
      <description>Ostatnio trafiłem na ciekawy problem, który wielokrotnie rozwiązywałem w nginx&amp;rsquo;ie ale tym razem musiałem zrobić to w Apache. Pewna stronka działa sobie na HTTPS&amp;rsquo;ie i chciałem by wszystkie powiązane z nią pliki były serwowane z jej adresu szyfrowanym połączeniem by nie pojawiały się w przeglądarce monity że &amp;ldquo;część ruchu nie jest szyfrowana&amp;rdquo;. Tyle że część potrzebnych plików była już obecnie serwowana na innym serwerze (w innej domenie) poprzez HTTP.
Mogłem albo skopiować te pliki i wykombinować jakiś mechanizm synchronizujący albo wykorzystać proxy + cache.</description>
    </item>
    
    <item>
      <title>X-Forwarded-For &#43; mod_rpaf - logowanie rzeczywistych adresów IP na Apache za reverse proxy</title>
      <link>https://timor.site/2011/11/x-forwarded-for-mod_rpaf-logowanie-rzeczywistych-adresow-ip-na-apache-za-reverse-proxy/</link>
      <pubDate>Mon, 28 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://timor.site/2011/11/x-forwarded-for-mod_rpaf-logowanie-rzeczywistych-adresow-ip-na-apache-za-reverse-proxy/</guid>
      <description>Gdy już ustawimy reverse proxy przed Apache szybko można zauważyć że w logach zamiast adresów IP zdalnych użytkowników pojawia się tylko jeden adres: adres naszego proxy. Również z poziomu php&amp;rsquo;a jako adres klienta widać IP naszego proxy.
By poradzić sobie z tym problemem trzeba na serwerze reverse proxy ustawić przekazywanie informacji o oryginalnym adresie IP klienta w nagłówku X-Forwarded-For. W przypadku gdy reverse proxy działa na nginx&amp;rsquo;e wystarczy dodać taki wpis:</description>
    </item>
    
  </channel>
</rss>
