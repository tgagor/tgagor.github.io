<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Wordpress on timor&#39;s site</title>
    <link>https://timor.site/tags/wordpress/</link>
    <description>Recent content in Wordpress on timor&#39;s site</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;span&gt;&amp;copy; 2011 &lt;a href=&#34;https://timor.site&#34;&gt;timor&#39;s site&lt;/a&gt;&lt;/span&gt; &lt;span&gt;Licensed under &lt;a rel=&#34;license&#34; rel=&#34;noopener noreferrer&#34; target=&#34;_blank&#34; href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt; (CC BY-SA 4.0)&lt;/a&gt;&lt;/span&gt;
</copyright>
    <lastBuildDate>Wed, 24 Feb 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://timor.site/tags/wordpress/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WordPress with HyperDB on PHP 7.0</title>
      <link>https://timor.site/2016/02/wordpress-with-hyperdb-on-php-7-0/</link>
      <pubDate>Wed, 24 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://timor.site/2016/02/wordpress-with-hyperdb-on-php-7-0/</guid>
      <description>I was configuring WordPress with HyperDB plugin on PHP 7.0 but the only I get were constant 500 errors. As I found here PHP 7.0 is not supported by HyperDB for now - it&amp;rsquo;s rely on mysql php extension but in PHP 7.0 there is only mysqli extension. But few folks fixed it and it&amp;rsquo;s possible to use it.
curl -O https://raw.githubusercontent.com/soulseekah/hyperdb-mysqli/master/db.php mv db.php /var/www/wordpress/wp-content/ And configure it ex. like this:</description>
    </item>
    
    <item>
      <title>Install WordPress from command-line</title>
      <link>https://timor.site/2016/02/install-wordpress-from-command-line/</link>
      <pubDate>Mon, 15 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://timor.site/2016/02/install-wordpress-from-command-line/</guid>
      <description>I never tried it before but today I needed to install WordPress&amp;hellip; From command line only. And there is a way to do this with wp-cli.
WP-CLI installation First some requirements (as root):
apt-get install php5-cli php5-mysql mysql-client curl And now installation of wp-cli (as root too):
curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar chmod +x wp-cli.phar mv wp-cli.phar /usr/local/bin/wp Check if it&amp;rsquo;s working:
$ wp --version WP-CLI 0.22.0 WordPress installation Now you should switch to user of your web application, ex.</description>
    </item>
    
    <item>
      <title>Mass replace in WordPress posts via MySQL query</title>
      <link>https://timor.site/2016/02/mass-replace-in-wordpress-posts-via-mysql-query/</link>
      <pubDate>Tue, 09 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://timor.site/2016/02/mass-replace-in-wordpress-posts-via-mysql-query/</guid>
      <description>&lt;p&gt;I was doing a lot of changes to my old posts, switched to HTTPS, etc. Sometimes it was useful to change some particular text in all my old posts at a time, but there is no such feature in WordPress. But WordPress runs on MySQL and I could use SQL query to update such posts.&lt;/p&gt;
&lt;p&gt;Make backup - it&amp;rsquo;s not required but strongly advised 😃&lt;/p&gt;
&lt;p&gt;Now use this query as template to replace in place whatever you need:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;</description>
    </item>
    
    <item>
      <title>fail2ban - block wp-login.php brute force attacks</title>
      <link>https://timor.site/2015/12/fail2ban-block-wp-login-php-brute-force-attacks/</link>
      <pubDate>Thu, 31 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://timor.site/2015/12/fail2ban-block-wp-login-php-brute-force-attacks/</guid>
      <description>Lately I had a lot of brute force attacks on my WordPress blog. I used basic auth to /wp-admin part in nginx configuration to block this and as a better solution I wan&amp;rsquo;t to block source IPs at all on firewall.
To do this, place this filter code in /etc/fail2ban/filter.d/wp-login.conf:
# WordPress brute force wp-login.php filter: # # Block IPs trying to authenticate in WordPress blog # # Matches e.g. # 178.</description>
    </item>
    
    <item>
      <title>WordPress - add meta tags: author, description, keywords, etc</title>
      <link>https://timor.site/2014/03/wordpress-add-meta-tags-author-description-keywords-etc/</link>
      <pubDate>Thu, 27 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://timor.site/2014/03/wordpress-add-meta-tags-author-description-keywords-etc/</guid>
      <description>After reading some SEO stuff I wanted to add some meta tags to my WordPress blog. I found this site: codex.wordpress.org/Meta_Tags_in_WordPress.
So WordPress thinks that it&amp;rsquo;s not necessary to have this meta tags any more&amp;hellip; But I want it! 😃 Next funny thing is how they suggest to add meta tags: copy header.php - what about theme updates?
I prefer to use functions.php file - just create it in your courrent theme directory with such content:</description>
    </item>
    
    <item>
      <title>Piwik: śledzenie asynchroniczne &#43; logowanie ksywy komentującego w WordPress’ie</title>
      <link>https://timor.site/2012/12/piwik-sledzenie-asynchroniczne-logowanie-ksywy-komentujacego-w-wordpressie/</link>
      <pubDate>Fri, 21 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://timor.site/2012/12/piwik-sledzenie-asynchroniczne-logowanie-ksywy-komentujacego-w-wordpressie/</guid>
      <description>Korzystam z instancji Piwik&amp;rsquo;a do monitorowania odwiedzin na stronie i postanowiłem pokombinować czy da się w ten sposób monitorować wejścia konkretnych osób na bazie wpisanego w polu komentarza loginu/ksywki. Jak zacząłem grzebać to przy okazji zmieniłem też sposób ładowania skryptów Piwika na asynchroniczny.
A leci to mniej więcej tak:
&amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; var i,x,y,ARRcookies=document.cookie.split(&amp;#34;;&amp;#34;); var comment_author = &amp;#34;&amp;#34;; for (i=0;i&amp;lt;ARRcookies.length;i++) { x=ARRcookies[i].substr(0,ARRcookies[i].indexOf(&amp;#34;=&amp;#34;)); y=ARRcookies[i].substr(ARRcookies[i].indexOf(&amp;#34;=&amp;#34;)+1); x=x.replace(/^\s+|\s+$/g,&amp;#34;&amp;#34;); if (x.indexOf(&amp;#34;comment_author&amp;#34;) != -1 &amp;amp;&amp;amp; x.indexOf(&amp;#34;comment_author_email&amp;#34;) == -1 &amp;amp;&amp;amp; x.</description>
    </item>
    
    <item>
      <title>Nginx - konfiguracja pod WordPress’a</title>
      <link>https://timor.site/2012/06/nginx-konfiguracja-pod-wordpressa/</link>
      <pubDate>Fri, 29 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://timor.site/2012/06/nginx-konfiguracja-pod-wordpressa/</guid>
      <description>To raczej nie jest podstawowy konfig i próżno szukać go na stronie WordPress&amp;rsquo;a, więc odradzam tę zabawę jeśli nie zna się zbyt dobrze nginx&amp;rsquo;a.
Ponieważ serwerek, na którym działa stronka to sprzęcik z Atomem 330 i mocy na CPU zbyt wiele nie ma to popularne pluginy (np. W3 Total Cache) potencjalnie zwiększające wydajność tak na prawdę zmulały stronkę jeszcze bardziej. Pluginów sprawdziłem kilka i każdorazowo efekt był podobny - stronka działała wolniej niż bez ich pomocy.</description>
    </item>
    
  </channel>
</rss>
